generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sorteo {
  id              Int            @id @default(autoincrement())
  nombre          String
  descripcion     String?
  presupuesto     Float?
  fechaLimite     DateTime
  fechaCreacion   DateTime       @default(now())
  fechaSorteo     DateTime?
  estado          EstadoSorteo   @default(PENDIENTE)
  creadorEmail    String
  creadorNombre   String
  tokenAdmin      String         @unique
  tokenResultados String?        @unique
  fechaExpiracion DateTime
  asignaciones    Asignacion[]
  exclusiones     Exclusion[]
  participantes   Participante[]

  @@index([creadorEmail], map: "idx_creador_email")
  @@index([tokenAdmin], map: "idx_token_admin")
  @@index([tokenResultados], map: "idx_token_resultados")
  @@index([fechaExpiracion], map: "idx_fecha_expiracion")
}

model Participante {
  id            Int                @id @default(autoincrement())
  nombre        String
  email         String
  token         String             @unique
  sorteoId      Int
  fechaRegistro DateTime           @default(now())
  estado        EstadoParticipante @default(PENDIENTE)
  asignacionA   Asignacion?        @relation("AsignacionA")
  asignacionDe  Asignacion?        @relation("AsignacionDe")
  deseos        Deseo[]
  exclusionesA  Exclusion[]        @relation("ExclusionA")
  exclusionesDe Exclusion[]        @relation("ExclusionDe")
  sorteo        Sorteo             @relation(fields: [sorteoId], references: [id], onDelete: Cascade)

  @@unique([email, sorteoId])
  @@index([token], map: "idx_participante_token")
  @@index([sorteoId], map: "idx_participante_sorteo")
}

model Exclusion {
  id               Int          @id @default(autoincrement())
  participanteDeId Int
  participanteAId  Int
  sorteoId         Int
  participanteA    Participante @relation("ExclusionA", fields: [participanteAId], references: [id], onDelete: Cascade)
  participanteDe   Participante @relation("ExclusionDe", fields: [participanteDeId], references: [id], onDelete: Cascade)
  sorteo           Sorteo       @relation(fields: [sorteoId], references: [id], onDelete: Cascade)

  @@unique([participanteDeId, participanteAId])
  @@index([sorteoId], map: "idx_exclusion_sorteo")
  @@index([participanteAId], map: "Exclusion_participanteAId_fkey")
}

model Asignacion {
  id                   Int          @id @default(autoincrement())
  participanteDeId     Int          @unique
  participanteAId      Int          @unique
  sorteoId             Int
  asignacionEncriptada String
  participanteA        Participante @relation("AsignacionA", fields: [participanteAId], references: [id], onDelete: Cascade)
  participanteDe       Participante @relation("AsignacionDe", fields: [participanteDeId], references: [id], onDelete: Cascade)
  sorteo               Sorteo       @relation(fields: [sorteoId], references: [id], onDelete: Cascade)

  @@index([sorteoId], map: "idx_asignacion_sorteo")
}

model Deseo {
  id             Int          @id @default(autoincrement())
  nombre         String
  descripcion    String?
  url            String?
  precioEstimado Float?
  imagen         String?
  amazonId       String?
  amazonAfiliado String?
  participanteId Int
  fechaCreacion  DateTime     @default(now())
  prioridad      Int          @default(0)
  participante   Participante @relation(fields: [participanteId], references: [id], onDelete: Cascade)

  @@index([participanteId], map: "idx_deseo_participante")
}

enum EstadoSorteo {
  PENDIENTE
  COMPLETO
  CANCELADO
}

enum EstadoParticipante {
  PENDIENTE
  CONFIRMADO
  RECHAZADO
}
